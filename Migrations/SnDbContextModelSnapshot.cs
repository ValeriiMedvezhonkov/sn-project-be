// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using sn_project_be.Data;

#nullable disable

namespace sn_project_be.Migrations
{
    [DbContext(typeof(SnDbContext))]
    partial class SnDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bd7a7276-168d-40c4-88c6-fa809993b6e1"),
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("cae420fb-001a-4df1-9ca0-dbd841ef22ac"),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("bdbb9a8a-7019-4d8f-bd96-120b6cb6af2c"),
                            RoleId = new Guid("bd7a7276-168d-40c4-88c6-fa809993b6e1")
                        },
                        new
                        {
                            UserId = new Guid("5a49c82b-4f25-4e93-84e7-a24df464a72b"),
                            RoleId = new Guid("cae420fb-001a-4df1-9ca0-dbd841ef22ac")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("sn_project_be.Data.ApiUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePicUrl")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bdbb9a8a-7019-4d8f-bd96-120b6cb6af2c"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 274, DateTimeKind.Utc).AddTicks(6290),
                            Email = "admin285@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN285@GMAIL.COM",
                            NormalizedUserName = "AKIHITOADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELh2/5K687maZ4oOH1RFFEhFePKDMnpfXIzL+6KQX3VgdgSwf/40LRGVrsB6EzE15g==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "9bbc9293-c220-454b-b44c-a708780f3a87",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 274, DateTimeKind.Utc).AddTicks(6290),
                            UserName = "AkihitoAdmin"
                        },
                        new
                        {
                            Id = new Guid("5a49c82b-4f25-4e93-84e7-a24df464a72b"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 316, DateTimeKind.Utc).AddTicks(8920),
                            Email = "medvezhonkov285@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Valerii",
                            LastName = "Medvezhonkov",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEDVEZHONKOV285@GMAIL.COM",
                            NormalizedUserName = "AKIHITO",
                            PasswordHash = "AQAAAAIAAYagAAAAENlD0kne1ARrBsG1Hp9eYcwBcuuLxPLYi4cl8SZ3XGUCdB9VtQLTCTwrYPFVvK0u2g==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d9471b99-af97-4d86-8233-0905712b5391",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 316, DateTimeKind.Utc).AddTicks(8920),
                            UserName = "Akihito"
                        },
                        new
                        {
                            Id = new Guid("757bdcc6-ce69-4d3a-b2fd-7d39d028ba4c"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 358, DateTimeKind.Utc).AddTicks(7780),
                            Email = "porttitor.scelerisque.neque@google.org",
                            EmailConfirmed = true,
                            FirstName = "Yuli Hinton",
                            LastName = "Wilma Rollins",
                            LockoutEnabled = false,
                            NormalizedEmail = "PORTTITOR.SCELERISQUE.NEQUE@GOOGLE.ORG",
                            NormalizedUserName = "GANNON",
                            PasswordHash = "AQAAAAIAAYagAAAAENwFnCfhfjEDG1XNwjphjowk264tqx4ez32l1LEGQDihVBT+/hyqK2ARL1fp9TKyIQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "86f08ef1-beb4-4825-bd56-6a96218305fc",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 358, DateTimeKind.Utc).AddTicks(7780),
                            UserName = "Gannon"
                        },
                        new
                        {
                            Id = new Guid("becfe44b-4347-4bc5-81f6-0cf3244ddd76"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 400, DateTimeKind.Utc).AddTicks(7910),
                            Email = "ut.odio@yahoo.couk",
                            EmailConfirmed = true,
                            FirstName = "Maisie Lawrence",
                            LastName = "Kitra Soto",
                            LockoutEnabled = false,
                            NormalizedEmail = "UT.ODIO@YAHOO.COUK",
                            NormalizedUserName = "ARDEN",
                            PasswordHash = "AQAAAAIAAYagAAAAED7lDvlbbkhiCRpfE0QSoeSbDZ0LCJ1nOt3uS6Vdzrm/EWf1JQ2pQyQL7t978jZwsA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "a1670304-fe7b-4d92-a1c7-5fec5aae009a",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 400, DateTimeKind.Utc).AddTicks(7910),
                            UserName = "Arden"
                        },
                        new
                        {
                            Id = new Guid("b74f0ac7-6d19-4d8f-bd5d-1a5d7335d3df"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 442, DateTimeKind.Utc).AddTicks(6130),
                            Email = "pede.nec@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Bianca Baxter",
                            LastName = "Felix Herman",
                            LockoutEnabled = false,
                            NormalizedEmail = "PEDE.NEC@OUTLOOK.COM",
                            NormalizedUserName = "BO",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ3MQBc4EtHkwFmqb/d/7SH0OSWbHVfXfPO5VHPi27N5149lfvswNocctCq51TgFbg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e2b49ed2-1c2b-4ba4-9817-2b0250e9100e",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 442, DateTimeKind.Utc).AddTicks(6140),
                            UserName = "Bo"
                        },
                        new
                        {
                            Id = new Guid("04ca7b0a-b838-4b33-a001-cbfa49c40468"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 484, DateTimeKind.Utc).AddTicks(7240),
                            Email = "risus.in@icloud.net",
                            EmailConfirmed = true,
                            FirstName = "George Weber",
                            LastName = "Marsden Contreras",
                            LockoutEnabled = false,
                            NormalizedEmail = "RISUS.IN@ICLOUD.NET",
                            NormalizedUserName = "HU",
                            PasswordHash = "AQAAAAIAAYagAAAAEImuPvIRiBdcJaqC8Lfi6byQwW5hI3PCWowMrQTCR85h+tJMqmVCJgRSJI6ljrkguA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "042abb75-eb48-48ff-8be7-dd30e9cfbdd0",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 484, DateTimeKind.Utc).AddTicks(7240),
                            UserName = "Hu"
                        },
                        new
                        {
                            Id = new Guid("c617bc9d-a82e-4cdb-9ed3-e20b17f530bb"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 527, DateTimeKind.Utc).AddTicks(2880),
                            Email = "purus.mauris@google.ca",
                            EmailConfirmed = true,
                            FirstName = "MacKenzie Burnett",
                            LastName = "Sophia Boyle",
                            LockoutEnabled = false,
                            NormalizedEmail = "PURUS.MAURIS@GOOGLE.CA",
                            NormalizedUserName = "IRIS",
                            PasswordHash = "AQAAAAIAAYagAAAAEFHZIvCSf1plsn3QsHjKiK3RTaQ01Gyr+H5fOJiOXQKDprPvdWT0J59GMcQbKbnjfw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c6712a25-c14e-4978-86ab-9f4185518ddc",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 527, DateTimeKind.Utc).AddTicks(2880),
                            UserName = "Iris"
                        },
                        new
                        {
                            Id = new Guid("3c08cfab-d72e-450a-8c64-1f82ab7c16f4"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 569, DateTimeKind.Utc).AddTicks(3480),
                            Email = "vitae@yahoo.net",
                            EmailConfirmed = true,
                            FirstName = "Kiara Perez",
                            LastName = "Desirae Hoover",
                            LockoutEnabled = false,
                            NormalizedEmail = "VITAE@YAHOO.NET",
                            NormalizedUserName = "MAGGIE",
                            PasswordHash = "AQAAAAIAAYagAAAAEHDpF3oZK/68Pt++FdcQY3RNEl/ehW4NKpLHdRyq6u3ft0gc4lFKWjCW1m+HsRIi6A==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "8dd3f4c6-e7a9-4dd9-860a-5ee1f776e6c5",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 569, DateTimeKind.Utc).AddTicks(3480),
                            UserName = "Maggie"
                        },
                        new
                        {
                            Id = new Guid("f80ff19f-4a2f-4f37-abc6-236b9d096611"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 611, DateTimeKind.Utc).AddTicks(3510),
                            Email = "fusce.diam.nunc@yahoo.org",
                            EmailConfirmed = true,
                            FirstName = "Holmes Burton",
                            LastName = "Melissa Burgess",
                            LockoutEnabled = false,
                            NormalizedEmail = "FUSCE.DIAM.NUNC@YAHOO.ORG",
                            NormalizedUserName = "FREDERICKA",
                            PasswordHash = "AQAAAAIAAYagAAAAEEAUDzCCquXrh6w0eI3X/YF1SSpDobkocrgii4oAOQwlR1QT1fVAwfb4vo6snCOzIQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6b36a00c-5573-494f-8278-17a117581fec",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 611, DateTimeKind.Utc).AddTicks(3510),
                            UserName = "Fredericka"
                        },
                        new
                        {
                            Id = new Guid("d136aab8-52d9-457f-8481-642016d2b35b"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 653, DateTimeKind.Utc).AddTicks(8170),
                            Email = "et.netus.et@outlook.edu",
                            EmailConfirmed = true,
                            FirstName = "Ralph Valdez",
                            LastName = "Beverly Contreras",
                            LockoutEnabled = false,
                            NormalizedEmail = "ET.NETUS.ET@OUTLOOK.EDU",
                            NormalizedUserName = "VLADIMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEJxdwHtOaXpHX6KHzv9l+wT5zUhWedXNnO8Rx+2wDPDXVHendJWK5c2WOC4aPy4qWw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0f416299-1a15-4bc1-9f6a-8262a61999e4",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 653, DateTimeKind.Utc).AddTicks(8170),
                            UserName = "Vladimir"
                        },
                        new
                        {
                            Id = new Guid("b8210314-bb0a-4296-9ec5-a4142246cea0"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 695, DateTimeKind.Utc).AddTicks(4630),
                            Email = "ipsum.curabitur@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Victoria Weaver",
                            LastName = "Paul Gomez",
                            LockoutEnabled = false,
                            NormalizedEmail = "IPSUM.CURABITUR@OUTLOOK.COM",
                            NormalizedUserName = "CAILIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJniuKIJyS+TPIYHr4322jyOTPQnPU0PpZwYPCtVwIgxPmP2/I9lbcarG+82X/iPhg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "95133c3b-a159-4888-b22f-9d7c9150c695",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 695, DateTimeKind.Utc).AddTicks(4630),
                            UserName = "Cailin"
                        },
                        new
                        {
                            Id = new Guid("3daa663d-0bdf-43ea-8f0e-ab3ecfccb4d1"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 737, DateTimeKind.Utc).AddTicks(3800),
                            Email = "blandit.congue@protonmail.ca",
                            EmailConfirmed = true,
                            FirstName = "Ursa Pickett",
                            LastName = "Dara Buckner",
                            LockoutEnabled = false,
                            NormalizedEmail = "BLANDIT.CONGUE@PROTONMAIL.CA",
                            NormalizedUserName = "AMENA",
                            PasswordHash = "AQAAAAIAAYagAAAAEEhnIcnrtcOVGGa4HvWVX6zvSZnyKyAlGn+p4maFxM+KxRKZMnXPbRCgBMbpqA3p5g==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "4b4c988c-7d2c-4727-847a-4627fbde81ea",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 737, DateTimeKind.Utc).AddTicks(3800),
                            UserName = "Amena"
                        },
                        new
                        {
                            Id = new Guid("a8835b47-914d-484e-8756-cada0c2b4dd8"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 779, DateTimeKind.Utc).AddTicks(8100),
                            Email = "non.vestibulum@outlook.ca",
                            EmailConfirmed = true,
                            FirstName = "Amity Hess",
                            LastName = "Alice Berry",
                            LockoutEnabled = false,
                            NormalizedEmail = "NON.VESTIBULUM@OUTLOOK.CA",
                            NormalizedUserName = "DEBRA",
                            PasswordHash = "AQAAAAIAAYagAAAAECS7XIIjtKyD0h4+fclaWTBrrc9MWISFDTdSWR70uvqIAduMXGhKeL+q/ruRzFIIgw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d1aa0ee1-7496-48ce-a2d8-b151cc4302dd",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 779, DateTimeKind.Utc).AddTicks(8100),
                            UserName = "Debra"
                        },
                        new
                        {
                            Id = new Guid("ea89b3a0-ff62-4425-bbef-a820fa67bb3e"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 822, DateTimeKind.Utc).AddTicks(2810),
                            Email = "metus.in@protonmail.edu",
                            EmailConfirmed = true,
                            FirstName = "Cooper Briggs",
                            LastName = "Anastasia Heath",
                            LockoutEnabled = false,
                            NormalizedEmail = "METUS.IN@PROTONMAIL.EDU",
                            NormalizedUserName = "KAYE",
                            PasswordHash = "AQAAAAIAAYagAAAAEGFNu3vm+kg4LeAxstb3fA+1exjakclR87Fa9ZpMLW+I+gG7jj9b5kj2vQE7kY9x1g==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "01f6d404-b13c-4385-ab47-d328dd12a8e3",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 822, DateTimeKind.Utc).AddTicks(2810),
                            UserName = "Kaye"
                        },
                        new
                        {
                            Id = new Guid("86a7e0c9-076a-4097-9b0f-95115bcc2ec8"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 864, DateTimeKind.Utc).AddTicks(6530),
                            Email = "quisque@hotmail.edu",
                            EmailConfirmed = true,
                            FirstName = "Brynne Johnson",
                            LastName = "Colby Dominguez",
                            LockoutEnabled = false,
                            NormalizedEmail = "QUISQUE@HOTMAIL.EDU",
                            NormalizedUserName = "TIMON",
                            PasswordHash = "AQAAAAIAAYagAAAAEIBlWIgcdhDFr8ooYmzstwDcZbP/r2NVbmc1zQN4Ia7YCu0MqJBI9Xnkmho8l4LKWA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "1863aa16-0ea1-4c6b-a352-c5fcbc6e2a7b",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 864, DateTimeKind.Utc).AddTicks(6530),
                            UserName = "Timon"
                        },
                        new
                        {
                            Id = new Guid("77d631fc-74c3-4973-bb0b-a331337df9e5"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 906, DateTimeKind.Utc).AddTicks(9510),
                            Email = "sed.molestie@icloud.couk",
                            EmailConfirmed = true,
                            FirstName = "Bruno Hurst",
                            LastName = "James Bender",
                            LockoutEnabled = false,
                            NormalizedEmail = "SED.MOLESTIE@ICLOUD.COUK",
                            NormalizedUserName = "BERT",
                            PasswordHash = "AQAAAAIAAYagAAAAENnx+EZbqSr1I59OnoqsWQJMEuQtEG+NDmz1wQ9hcUK64dUK9WeactUyYpfI2jlaZw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "1cd0969a-ca7c-4f76-96bc-57071e68ab38",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 906, DateTimeKind.Utc).AddTicks(9510),
                            UserName = "Bert"
                        },
                        new
                        {
                            Id = new Guid("5fbed1ed-1d3b-4b10-9ff7-4a2a816ad3e7"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 949, DateTimeKind.Utc).AddTicks(830),
                            Email = "integer.vulputate@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Brandon Waller",
                            LastName = "Brenden Brady",
                            LockoutEnabled = false,
                            NormalizedEmail = "INTEGER.VULPUTATE@YAHOO.COM",
                            NormalizedUserName = "PHILLIP",
                            PasswordHash = "AQAAAAIAAYagAAAAEOageyKTZHoCtlwfA80RrHcilj+I/ziQ8Cw5tR5gFN4XvaIV8A1suCdPNcOnKPbMLA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "2d95de97-82ab-4508-b676-153c2f495ff1",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 949, DateTimeKind.Utc).AddTicks(840),
                            UserName = "Phillip"
                        },
                        new
                        {
                            Id = new Guid("9befd394-2945-4560-94b4-53f24c61b585"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 991, DateTimeKind.Utc).AddTicks(4920),
                            Email = "sed.nec@hotmail.org",
                            EmailConfirmed = true,
                            FirstName = "Gage Goodman",
                            LastName = "Ursula Bradshaw",
                            LockoutEnabled = false,
                            NormalizedEmail = "SED.NEC@HOTMAIL.ORG",
                            NormalizedUserName = "LEAH",
                            PasswordHash = "AQAAAAIAAYagAAAAEDJh2IOaqmgLkt8/GnBod5VVl4EHpWDsRf8N1yieEF/Q2Qt3/QV6ZhMFCHB+9PYWqw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "08991d57-b204-440f-86a3-89fc8b2d1efa",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 24, 17, 5, 26, 991, DateTimeKind.Utc).AddTicks(4920),
                            UserName = "Leah"
                        },
                        new
                        {
                            Id = new Guid("afcfc171-05f6-46bb-b323-96f56a218a98"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 24, 17, 5, 27, 33, DateTimeKind.Utc).AddTicks(6440),
                            Email = "turpis.in.condimentum@icloud.edu",
                            EmailConfirmed = true,
                            FirstName = "Melissa Rosa",
                            LastName = "Ariana Tanner",
                            LockoutEnabled = false,
                            NormalizedEmail = "TURPIS.IN.CONDIMENTUM@ICLOUD.EDU",
                            NormalizedUserName = "UNITY",
                            PasswordHash = "AQAAAAIAAYagAAAAEH7wyuxXbp+zQzqYGmG5o7YNipsBXgoZMqmvwV8GWDJCncKxgBx+Vt9NQ2aWPrYdyQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "f26e7362-2534-4cbe-abac-4bc32cfeabc1",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 24, 17, 5, 27, 33, DateTimeKind.Utc).AddTicks(6440),
                            UserName = "Unity"
                        },
                        new
                        {
                            Id = new Guid("115e991b-dbea-43f6-aa20-b2045fd2d36d"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 24, 17, 5, 27, 76, DateTimeKind.Utc).AddTicks(850),
                            Email = "suscipit.nonummy@yahoo.couk",
                            EmailConfirmed = true,
                            FirstName = "Serina Sparks",
                            LastName = "Vanna Dyer",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUSCIPIT.NONUMMY@YAHOO.COUK",
                            NormalizedUserName = "ABBOT",
                            PasswordHash = "AQAAAAIAAYagAAAAEMEkqu8hVzBIoJTyHfwoUNqaJWOhjsXpbiHNpZb9QKZ0m2kWk11WTeBbkwe8JO9ASQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "aa9959ab-28ff-436e-b0e6-973470f20447",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 24, 17, 5, 27, 76, DateTimeKind.Utc).AddTicks(850),
                            UserName = "Abbot"
                        },
                        new
                        {
                            Id = new Guid("d6f47b21-0b09-4413-9d34-344f9cb2539e"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 24, 17, 5, 27, 118, DateTimeKind.Utc).AddTicks(3600),
                            Email = "urna@outlook.net",
                            EmailConfirmed = true,
                            FirstName = "Nyssa Forbes",
                            LastName = "Margaret Berg",
                            LockoutEnabled = false,
                            NormalizedEmail = "URNA@OUTLOOK.NET",
                            NormalizedUserName = "HAYES",
                            PasswordHash = "AQAAAAIAAYagAAAAEE7IDFZLvDqLCpsarNXMm8k4WK5OVdLmwKYqVjcNAJuUCASUCH5lDw9kf6D8OBG7wA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "9fe55e03-e5a4-45d9-8a21-cb22f7197eb3",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 24, 17, 5, 27, 118, DateTimeKind.Utc).AddTicks(3600),
                            UserName = "Hayes"
                        },
                        new
                        {
                            Id = new Guid("6c5f6c63-741d-4439-86f8-03e7e1384b44"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 24, 17, 5, 27, 160, DateTimeKind.Utc).AddTicks(7150),
                            Email = "amet.risus.donec@hotmail.ca",
                            EmailConfirmed = true,
                            FirstName = "Jelani Conrad",
                            LastName = "Stewart Blankenship",
                            LockoutEnabled = false,
                            NormalizedEmail = "AMET.RISUS.DONEC@HOTMAIL.CA",
                            NormalizedUserName = "KAY",
                            PasswordHash = "AQAAAAIAAYagAAAAEEfoCME1CJ9v7od4q68/RGu4htqtR/nZGGcTaWSCja+zTwQd4DQVzM1ZEOjVRQ6WNw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "fd1bedac-9297-4035-8374-7e1f07d19b71",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 24, 17, 5, 27, 160, DateTimeKind.Utc).AddTicks(7150),
                            UserName = "Kay"
                        });
                });

            modelBuilder.Entity("sn_project_be.Data.Friendship", b =>
                {
                    b.Property<Guid>("FriendshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceiverUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("FriendshipId");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("sn_project_be.Data.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("sn_project_be.Data.User_Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPosts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("sn_project_be.Data.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("sn_project_be.Data.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sn_project_be.Data.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("sn_project_be.Data.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sn_project_be.Data.Friendship", b =>
                {
                    b.HasOne("sn_project_be.Data.ApiUser", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sn_project_be.Data.ApiUser", "SenderUser")
                        .WithMany("Friendships")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceiverUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("sn_project_be.Data.User_Post", b =>
                {
                    b.HasOne("sn_project_be.Data.Post", "Post")
                        .WithMany("UserPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sn_project_be.Data.ApiUser", "User")
                        .WithMany("UserPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("sn_project_be.Data.ApiUser", b =>
                {
                    b.Navigation("Friendships");

                    b.Navigation("UserPosts");
                });

            modelBuilder.Entity("sn_project_be.Data.Post", b =>
                {
                    b.Navigation("UserPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
