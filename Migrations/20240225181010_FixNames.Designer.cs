// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using sn_project_be.Data;

#nullable disable

namespace sn_project_be.Migrations
{
    [DbContext(typeof(SnDbContext))]
    [Migration("20240225181010_FixNames")]
    partial class FixNames
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0644dff7-fd36-4570-850b-3243fda40864"),
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("0dc936eb-4177-415d-ae48-4b83133df596"),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("f8c61f1f-c22e-40f4-9f59-9a3954f86ff6"),
                            RoleId = new Guid("0644dff7-fd36-4570-850b-3243fda40864")
                        },
                        new
                        {
                            UserId = new Guid("5232a7fa-b52f-4d39-b703-41f4f0bf046f"),
                            RoleId = new Guid("0dc936eb-4177-415d-ae48-4b83133df596")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("sn_project_be.Data.ApiUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePicUrl")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f8c61f1f-c22e-40f4-9f59-9a3954f86ff6"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 25, 18, 10, 9, 745, DateTimeKind.Utc).AddTicks(508),
                            Email = "admin285@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN285@GMAIL.COM",
                            NormalizedUserName = "AKIHITOADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHBwuz0hGS3UnZRnaxMTfVNqVRDyQLs62rhBbgZrSWnVDxXJCxiFnxuiqJijnwN8Cw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0a0d835d-53eb-4b05-80d5-26386bf81328",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 25, 18, 10, 9, 745, DateTimeKind.Utc).AddTicks(512),
                            UserName = "AkihitoAdmin"
                        },
                        new
                        {
                            Id = new Guid("5232a7fa-b52f-4d39-b703-41f4f0bf046f"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 25, 18, 10, 9, 778, DateTimeKind.Utc).AddTicks(648),
                            Email = "medvezhonkov285@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Valerii",
                            LastName = "Medvezhonkov",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEDVEZHONKOV285@GMAIL.COM",
                            NormalizedUserName = "AKIHITO",
                            PasswordHash = "AQAAAAIAAYagAAAAEJycT4z5YuhEwUyzomrflGn/9/jI4m0mXuqObeoNa5o/Z+YFKhcJgtW3XEy+D+GETw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "875ef712-d84d-4fea-85f9-9fac5f2efc66",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 25, 18, 10, 9, 778, DateTimeKind.Utc).AddTicks(650),
                            UserName = "Akihito"
                        },
                        new
                        {
                            Id = new Guid("5bc0bade-91c4-42b3-9e79-69176145d2d9"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 25, 18, 10, 9, 811, DateTimeKind.Utc).AddTicks(2002),
                            Email = "porttitor.scelerisque.neque@google.org",
                            EmailConfirmed = true,
                            FirstName = "Yuli",
                            LastName = "Hinton",
                            LockoutEnabled = false,
                            NormalizedEmail = "PORTTITOR.SCELERISQUE.NEQUE@GOOGLE.ORG",
                            NormalizedUserName = "GANNON",
                            PasswordHash = "AQAAAAIAAYagAAAAEDgTEFo7AJDovJy/g5o3Vh4tlsaZcLVgXYpQHfsyEDDcnDQARMiNwLFyefdzH2PILA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "1266d885-e724-4253-9185-6a52c4476c9d",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 25, 18, 10, 9, 811, DateTimeKind.Utc).AddTicks(2004),
                            UserName = "Gannon"
                        },
                        new
                        {
                            Id = new Guid("d9f6422e-58b8-46ea-be7b-461db3a2b1d5"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 25, 18, 10, 9, 844, DateTimeKind.Utc).AddTicks(5774),
                            Email = "ut.odio@yahoo.couk",
                            EmailConfirmed = true,
                            FirstName = "Maisie",
                            LastName = "Lawrence",
                            LockoutEnabled = false,
                            NormalizedEmail = "UT.ODIO@YAHOO.COUK",
                            NormalizedUserName = "ARDEN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPnhEpy4zhytljJ/QniaLnLg2SgR9BEDfXHduUEzpmWai6RNclxdiCzU7u5AU+XObw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c9aa99b1-3aad-4a1e-8345-cd8e5c3d9a34",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 25, 18, 10, 9, 844, DateTimeKind.Utc).AddTicks(5777),
                            UserName = "Arden"
                        },
                        new
                        {
                            Id = new Guid("adadaba8-8941-4e0e-ada0-67b582eafd20"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 25, 18, 10, 9, 877, DateTimeKind.Utc).AddTicks(6621),
                            Email = "pede.nec@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Bianca",
                            LastName = "Baxter",
                            LockoutEnabled = false,
                            NormalizedEmail = "PEDE.NEC@OUTLOOK.COM",
                            NormalizedUserName = "BO",
                            PasswordHash = "AQAAAAIAAYagAAAAEO6NrFl4jljFePaFudg/F9yM8kHjBfGShOtvLtMju2LR44BDBHYczsXiTjXQcAP4Rg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "2ce3710c-82f1-4959-b0f3-784779057e18",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 25, 18, 10, 9, 877, DateTimeKind.Utc).AddTicks(6623),
                            UserName = "Bo"
                        },
                        new
                        {
                            Id = new Guid("f7975ed3-d1f7-442a-9149-2413f7e37ded"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 25, 18, 10, 9, 910, DateTimeKind.Utc).AddTicks(6705),
                            Email = "risus.in@icloud.net",
                            EmailConfirmed = true,
                            FirstName = "George",
                            LastName = "Weber",
                            LockoutEnabled = false,
                            NormalizedEmail = "RISUS.IN@ICLOUD.NET",
                            NormalizedUserName = "HU",
                            PasswordHash = "AQAAAAIAAYagAAAAEISMODvXn0jivXbaIOzCP+VcbGcoKXBKH08/jhQS6z299xKV/hV9uqU7qkmTrGy7Vw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "fa581883-8043-4c29-a24a-d99f8e434bf5",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 25, 18, 10, 9, 910, DateTimeKind.Utc).AddTicks(6707),
                            UserName = "Hu"
                        },
                        new
                        {
                            Id = new Guid("431776d1-3b94-471d-8043-8dbfac6cce38"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 25, 18, 10, 9, 944, DateTimeKind.Utc).AddTicks(6044),
                            Email = "purus.mauris@google.ca",
                            EmailConfirmed = true,
                            FirstName = "MacKenzie",
                            LastName = "Burnett",
                            LockoutEnabled = false,
                            NormalizedEmail = "PURUS.MAURIS@GOOGLE.CA",
                            NormalizedUserName = "IRIS",
                            PasswordHash = "AQAAAAIAAYagAAAAEPPMyVNYNqnTN2FIUX7rNOMd6BntyCi3C7gQYkzc+ARDuwbypFUaGrZ0fq7wis6AYA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "38b174c9-ed3f-45e7-b6a9-e755c73fcd56",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 25, 18, 10, 9, 944, DateTimeKind.Utc).AddTicks(6048),
                            UserName = "Iris"
                        },
                        new
                        {
                            Id = new Guid("ba0b0267-9a1a-4f81-8ad6-8559d2e1a459"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 25, 18, 10, 9, 977, DateTimeKind.Utc).AddTicks(9857),
                            Email = "vitae@yahoo.net",
                            EmailConfirmed = true,
                            FirstName = "Kiara",
                            LastName = "Perez",
                            LockoutEnabled = false,
                            NormalizedEmail = "VITAE@YAHOO.NET",
                            NormalizedUserName = "MAGGIE",
                            PasswordHash = "AQAAAAIAAYagAAAAEMtoxSEybUo0g6lp1YxfE8OSdV2reviFA1T8pUoKXIMC2tFcFFJzW3xwDvoYg2KMWw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "002d2bdf-98f8-4f16-ae19-1ed21e76ad1b",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 25, 18, 10, 9, 977, DateTimeKind.Utc).AddTicks(9860),
                            UserName = "Maggie"
                        },
                        new
                        {
                            Id = new Guid("71009e57-f62d-426d-8daf-398f7f643188"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 11, DateTimeKind.Utc).AddTicks(2737),
                            Email = "fusce.diam.nunc@yahoo.org",
                            EmailConfirmed = true,
                            FirstName = "Holmes",
                            LastName = "Burton",
                            LockoutEnabled = false,
                            NormalizedEmail = "FUSCE.DIAM.NUNC@YAHOO.ORG",
                            NormalizedUserName = "FREDERICKA",
                            PasswordHash = "AQAAAAIAAYagAAAAEEWsS9tZ0oNlJpBkMhMotS825NxOurutcR0rBMsOs4GyH14r5JiajcErGwZ85d3GqA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "5ce83d11-bd21-4835-b610-f41d5bf3caf5",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 11, DateTimeKind.Utc).AddTicks(2739),
                            UserName = "Fredericka"
                        },
                        new
                        {
                            Id = new Guid("f69df457-8f18-4d15-aa2f-65c71d480286"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 45, DateTimeKind.Utc).AddTicks(3784),
                            Email = "et.netus.et@outlook.edu",
                            EmailConfirmed = true,
                            FirstName = "Ralph",
                            LastName = "Valdez",
                            LockoutEnabled = false,
                            NormalizedEmail = "ET.NETUS.ET@OUTLOOK.EDU",
                            NormalizedUserName = "VLADIMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEBh1wFyCjf5pv8IkTkz2Gqw9BJl6c7EcYuFpOPm3jPjXtce37zzQIs+ygmHZtTh/BQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "fc44523f-1f0d-42bd-91dc-79c46f935abf",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 45, DateTimeKind.Utc).AddTicks(3786),
                            UserName = "Vladimir"
                        },
                        new
                        {
                            Id = new Guid("b800c205-d16b-451e-81ff-c365d90aa678"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 81, DateTimeKind.Utc).AddTicks(8924),
                            Email = "ipsum.curabitur@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Victoria",
                            LastName = "Weaver",
                            LockoutEnabled = false,
                            NormalizedEmail = "IPSUM.CURABITUR@OUTLOOK.COM",
                            NormalizedUserName = "CAILIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMCLGc4tACRp40ExObAZQRx88Bd4j925jApQsiZ/HMuWXKC/CyYXnhAxlFsOwOYtoQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "9362af28-e620-4600-9149-81164cb23ea3",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 81, DateTimeKind.Utc).AddTicks(8927),
                            UserName = "Cailin"
                        },
                        new
                        {
                            Id = new Guid("948fe301-1297-48a4-b92a-11b47ad100d9"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 115, DateTimeKind.Utc).AddTicks(5026),
                            Email = "blandit.congue@protonmail.ca",
                            EmailConfirmed = true,
                            FirstName = "Ursa",
                            LastName = "Pickett",
                            LockoutEnabled = false,
                            NormalizedEmail = "BLANDIT.CONGUE@PROTONMAIL.CA",
                            NormalizedUserName = "AMENA",
                            PasswordHash = "AQAAAAIAAYagAAAAEHG6rbprM/qPTQ5Td+W/ZMt/VK8641+FOKDUx7ID3+RE5/mydGlmZuusmURUzBEcLQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c8d1a285-8e0c-4108-9e0a-c8ad28bb3cd7",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 115, DateTimeKind.Utc).AddTicks(5029),
                            UserName = "Amena"
                        },
                        new
                        {
                            Id = new Guid("71b0267f-eaff-4591-815c-1bca2bd47c53"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 148, DateTimeKind.Utc).AddTicks(8069),
                            Email = "non.vestibulum@outlook.ca",
                            EmailConfirmed = true,
                            FirstName = "Amity",
                            LastName = "Hess",
                            LockoutEnabled = false,
                            NormalizedEmail = "NON.VESTIBULUM@OUTLOOK.CA",
                            NormalizedUserName = "DEBRA",
                            PasswordHash = "AQAAAAIAAYagAAAAEBif1IuJ+c92cLZLaY8VvYSH8o3Sy4VJXbLzGXZ4+SIgwxpYkqHWKaICekP5zfK25w==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b6e0471c-54b5-4f4b-8d15-e4944f8ba118",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 148, DateTimeKind.Utc).AddTicks(8072),
                            UserName = "Debra"
                        },
                        new
                        {
                            Id = new Guid("0649c594-7674-46f5-8e5c-7c2901f14a3b"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 182, DateTimeKind.Utc).AddTicks(679),
                            Email = "metus.in@protonmail.edu",
                            EmailConfirmed = true,
                            FirstName = "Cooper",
                            LastName = "Briggs",
                            LockoutEnabled = false,
                            NormalizedEmail = "METUS.IN@PROTONMAIL.EDU",
                            NormalizedUserName = "KAYE",
                            PasswordHash = "AQAAAAIAAYagAAAAEIL7cVQHReo8YW7tYHdsHbGg8cfW26z9wKVo65e1nl713Yb5mr4seS/0IRSFq4CEyA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "dd0bf2c0-3d8a-4d30-b536-efd73d54139b",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 182, DateTimeKind.Utc).AddTicks(681),
                            UserName = "Kaye"
                        },
                        new
                        {
                            Id = new Guid("d3e43058-4bda-4dd2-beb8-402b5e478885"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 215, DateTimeKind.Utc).AddTicks(7896),
                            Email = "quisque@hotmail.edu",
                            EmailConfirmed = true,
                            FirstName = "Brynne",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "QUISQUE@HOTMAIL.EDU",
                            NormalizedUserName = "TIMON",
                            PasswordHash = "AQAAAAIAAYagAAAAEB6PJbCFCc0oTCHhAtxi8v2kloT3Ihv9M1azaUY5yiFoEBflnOHFzwjjwqbTowYjGA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "236de044-644e-48aa-8d26-62b68e66a8f3",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 215, DateTimeKind.Utc).AddTicks(7900),
                            UserName = "Timon"
                        },
                        new
                        {
                            Id = new Guid("64f2b1d7-7771-4b36-82ba-f85a9abea4b0"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 248, DateTimeKind.Utc).AddTicks(9691),
                            Email = "sed.molestie@icloud.couk",
                            EmailConfirmed = true,
                            FirstName = "Bruno",
                            LastName = "Hurst",
                            LockoutEnabled = false,
                            NormalizedEmail = "SED.MOLESTIE@ICLOUD.COUK",
                            NormalizedUserName = "BERT",
                            PasswordHash = "AQAAAAIAAYagAAAAEPD5l4uB//GT0G7jMDdOeGfjfNRfYtTbtVpWIuNUY4mfKF/LVwxgP5BesnJbR/AJmQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "8d8de1f8-8fb5-4a74-bcb2-38fb72703e36",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 248, DateTimeKind.Utc).AddTicks(9694),
                            UserName = "Bert"
                        },
                        new
                        {
                            Id = new Guid("42aaeaeb-6a22-425c-82c6-02fff5cc24ad"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 281, DateTimeKind.Utc).AddTicks(9886),
                            Email = "integer.vulputate@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Brandon",
                            LastName = "Waller",
                            LockoutEnabled = false,
                            NormalizedEmail = "INTEGER.VULPUTATE@YAHOO.COM",
                            NormalizedUserName = "PHILLIP",
                            PasswordHash = "AQAAAAIAAYagAAAAEHVrNCDzc7IQtpY7uHgP7YvELM1JA1h5/+uKnsRRS5L5rAN6ympRa5mnzqjSDwAAZA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c7e730aa-f2a7-4776-b152-9103e77ddc4d",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 281, DateTimeKind.Utc).AddTicks(9888),
                            UserName = "Phillip"
                        },
                        new
                        {
                            Id = new Guid("be965456-788f-4f4d-9025-916dfa5e2aa9"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 315, DateTimeKind.Utc).AddTicks(423),
                            Email = "sed.nec@hotmail.org",
                            EmailConfirmed = true,
                            FirstName = "Gage",
                            LastName = "Goodman",
                            LockoutEnabled = false,
                            NormalizedEmail = "SED.NEC@HOTMAIL.ORG",
                            NormalizedUserName = "LEAH",
                            PasswordHash = "AQAAAAIAAYagAAAAENz/NX7ncYWViNkRulzgeEJM7pV+jWPT2DFEZE63uz/ehspo3TE5r5q5C3MC2ZxQmQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "fad64f0d-389d-4ca3-90fc-e7bd7ef7ebfa",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 315, DateTimeKind.Utc).AddTicks(425),
                            UserName = "Leah"
                        },
                        new
                        {
                            Id = new Guid("2b252b38-9b5f-4ad1-9072-03fd9557a97e"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 349, DateTimeKind.Utc).AddTicks(1468),
                            Email = "turpis.in.condimentum@icloud.edu",
                            EmailConfirmed = true,
                            FirstName = "Melissa",
                            LastName = "Rosa",
                            LockoutEnabled = false,
                            NormalizedEmail = "TURPIS.IN.CONDIMENTUM@ICLOUD.EDU",
                            NormalizedUserName = "UNITY",
                            PasswordHash = "AQAAAAIAAYagAAAAEL6RQJLJ6mFCwMlVIVjDXL5+0EXSvyssjK4xdxg8hcc9/RmRkEQ3OLf6rWUkmp8WpQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6c3009ec-fc72-4ac7-9cf0-d947fd626178",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 349, DateTimeKind.Utc).AddTicks(1470),
                            UserName = "Unity"
                        },
                        new
                        {
                            Id = new Guid("e0f5ecd6-eba0-42f8-bc14-948c6b026bd0"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 382, DateTimeKind.Utc).AddTicks(2335),
                            Email = "suscipit.nonummy@yahoo.couk",
                            EmailConfirmed = true,
                            FirstName = "Serina",
                            LastName = "Sparks",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUSCIPIT.NONUMMY@YAHOO.COUK",
                            NormalizedUserName = "ABBOT",
                            PasswordHash = "AQAAAAIAAYagAAAAEFUGmSXTkNfb4zdHWjGZ2lKe4EYWTsUQvfoEn3ky64gU6OC10D+8nPKlN7xrXMpf7Q==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "99655a56-4d83-49e4-a51a-caed4adaba3d",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 382, DateTimeKind.Utc).AddTicks(2335),
                            UserName = "Abbot"
                        },
                        new
                        {
                            Id = new Guid("38056a1f-ae9c-4064-9e23-5e61fdef6aa6"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 415, DateTimeKind.Utc).AddTicks(7636),
                            Email = "urna@outlook.net",
                            EmailConfirmed = true,
                            FirstName = "Nyssa",
                            LastName = "Forbes",
                            LockoutEnabled = false,
                            NormalizedEmail = "URNA@OUTLOOK.NET",
                            NormalizedUserName = "HAYES",
                            PasswordHash = "AQAAAAIAAYagAAAAEKPnr332FdN8A68UV7a5VWKQg/54UbKllU90jQzu1QvKnJXXnKfW0ktSvpoHBZa2Ng==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "671ea42f-1522-4bac-9894-e1b6c3d1c611",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 415, DateTimeKind.Utc).AddTicks(7639),
                            UserName = "Hayes"
                        },
                        new
                        {
                            Id = new Guid("61671ed0-02c0-436f-bbb8-e4ac7a40874a"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 448, DateTimeKind.Utc).AddTicks(7961),
                            Email = "amet.risus.donec@hotmail.ca",
                            EmailConfirmed = true,
                            FirstName = "Jelani",
                            LastName = "Conrad",
                            LockoutEnabled = false,
                            NormalizedEmail = "AMET.RISUS.DONEC@HOTMAIL.CA",
                            NormalizedUserName = "KAY",
                            PasswordHash = "AQAAAAIAAYagAAAAEJjnDI/wZzmHerxz1fJuMEufK6J2H9sJYSmEbXBp/BLVk4mLOKfBvZ7OwIgXm22T3Q==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "5ac98a1f-3a5e-4aa5-8c4c-05dc9b573c14",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 25, 18, 10, 10, 448, DateTimeKind.Utc).AddTicks(7963),
                            UserName = "Kay"
                        });
                });

            modelBuilder.Entity("sn_project_be.Data.Friendship", b =>
                {
                    b.Property<Guid>("FriendshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceiverUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("FriendshipId");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("sn_project_be.Data.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("sn_project_be.Data.User_Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPosts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("sn_project_be.Data.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("sn_project_be.Data.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sn_project_be.Data.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("sn_project_be.Data.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sn_project_be.Data.Friendship", b =>
                {
                    b.HasOne("sn_project_be.Data.ApiUser", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sn_project_be.Data.ApiUser", "SenderUser")
                        .WithMany("Friendships")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceiverUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("sn_project_be.Data.User_Post", b =>
                {
                    b.HasOne("sn_project_be.Data.Post", "Post")
                        .WithMany("UserPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sn_project_be.Data.ApiUser", "User")
                        .WithMany("UserPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("sn_project_be.Data.ApiUser", b =>
                {
                    b.Navigation("Friendships");

                    b.Navigation("UserPosts");
                });

            modelBuilder.Entity("sn_project_be.Data.Post", b =>
                {
                    b.Navigation("UserPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
