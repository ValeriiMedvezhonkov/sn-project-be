// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using sn_project_be.Data;

#nullable disable

namespace sn_project_be.Migrations
{
    [DbContext(typeof(SnDbContext))]
    [Migration("20240227140245_Posts")]
    partial class Posts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("539cef60-64ce-491c-a180-d2491d63d7c2"),
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("092da31d-f2f8-4c73-af24-a995ec9c8a7b"),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("0c2b9dd4-ccee-44e0-9cbf-e1995afb9637"),
                            RoleId = new Guid("539cef60-64ce-491c-a180-d2491d63d7c2")
                        },
                        new
                        {
                            UserId = new Guid("ff68914d-4983-4150-ba9a-ec949f7ffd00"),
                            RoleId = new Guid("092da31d-f2f8-4c73-af24-a995ec9c8a7b")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("sn_project_be.Data.ApiUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePicUrl")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c2b9dd4-ccee-44e0-9cbf-e1995afb9637"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 27, 14, 2, 44, 806, DateTimeKind.Utc).AddTicks(9874),
                            Email = "admin285@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN285@GMAIL.COM",
                            NormalizedUserName = "AKIHITOADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEIJvlUdk9Xw8zpU8V2i9GdQMZ2lNc3hjMmCJFvfelnZbEVmynJBg88eG6RBoVZwfpQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "21dbd882-eb87-402e-9562-f5d6e4c600bf",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 44, 806, DateTimeKind.Utc).AddTicks(9877),
                            UserName = "AkihitoAdmin"
                        },
                        new
                        {
                            Id = new Guid("ff68914d-4983-4150-ba9a-ec949f7ffd00"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 27, 14, 2, 44, 840, DateTimeKind.Utc).AddTicks(1331),
                            Email = "medvezhonkov285@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Valerii",
                            LastName = "Medvezhonkov",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEDVEZHONKOV285@GMAIL.COM",
                            NormalizedUserName = "AKIHITO",
                            PasswordHash = "AQAAAAIAAYagAAAAELwniNZuZa2eODmRF26FtbehIyEXN7BuUPUCKaswlc31G/sJD4ZSt1BLNdg7J04t1Q==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "aeaf81d8-1718-49f5-8ead-1416ebe88843",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 44, 840, DateTimeKind.Utc).AddTicks(1332),
                            UserName = "Akihito"
                        },
                        new
                        {
                            Id = new Guid("281ce51e-6128-45a0-b79a-575af2b69569"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 27, 14, 2, 44, 873, DateTimeKind.Utc).AddTicks(4652),
                            Email = "porttitor.scelerisque.neque@google.org",
                            EmailConfirmed = true,
                            FirstName = "Yuli",
                            LastName = "Hinton",
                            LockoutEnabled = false,
                            NormalizedEmail = "PORTTITOR.SCELERISQUE.NEQUE@GOOGLE.ORG",
                            NormalizedUserName = "GANNON",
                            PasswordHash = "AQAAAAIAAYagAAAAEIHQpMjQ3npLw/HsdQ0wynsNwJbvhsK2XZusYar0Uhon+HoyzSIcl68bGXPwPogpig==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "a2fa7f77-c138-4a3f-a0da-04997f6bbe66",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 44, 873, DateTimeKind.Utc).AddTicks(4652),
                            UserName = "Gannon"
                        },
                        new
                        {
                            Id = new Guid("f26f452c-eda5-4db2-b956-77220183101a"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 27, 14, 2, 44, 906, DateTimeKind.Utc).AddTicks(7645),
                            Email = "ut.odio@yahoo.couk",
                            EmailConfirmed = true,
                            FirstName = "Maisie",
                            LastName = "Lawrence",
                            LockoutEnabled = false,
                            NormalizedEmail = "UT.ODIO@YAHOO.COUK",
                            NormalizedUserName = "ARDEN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJxwRongSi4MV5MTUUqkKAezEZbp64XOHUxoEw1jZ5wx76CgqkZdIuZI+7bn4AOqyg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "04e59f43-e07e-4515-a5cd-1fcae347bf80",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 44, 906, DateTimeKind.Utc).AddTicks(7647),
                            UserName = "Arden"
                        },
                        new
                        {
                            Id = new Guid("82b8cd4c-62fb-44dd-bf0a-1b16b02af0f5"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 27, 14, 2, 44, 940, DateTimeKind.Utc).AddTicks(1348),
                            Email = "pede.nec@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Bianca",
                            LastName = "Baxter",
                            LockoutEnabled = false,
                            NormalizedEmail = "PEDE.NEC@OUTLOOK.COM",
                            NormalizedUserName = "BO",
                            PasswordHash = "AQAAAAIAAYagAAAAEC+YkiBWdMAibUSgWOpMry7ooxtG2OoBnOGdQbg3RJIfuZr4z9ycTAYQ8jk+zyVc5w==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "5074ec74-9b52-43fe-a017-fa9e8d19f213",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 44, 940, DateTimeKind.Utc).AddTicks(1350),
                            UserName = "Bo"
                        },
                        new
                        {
                            Id = new Guid("35e675ee-0a72-4021-9a2e-d0c7cb212e22"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 27, 14, 2, 44, 973, DateTimeKind.Utc).AddTicks(6471),
                            Email = "risus.in@icloud.net",
                            EmailConfirmed = true,
                            FirstName = "George",
                            LastName = "Weber",
                            LockoutEnabled = false,
                            NormalizedEmail = "RISUS.IN@ICLOUD.NET",
                            NormalizedUserName = "HU",
                            PasswordHash = "AQAAAAIAAYagAAAAEPhjQvW2GirLWDEsffB2wHlIPaa+JkjlMK7EY8XnLf2SEoQ/KDzDfNhTzhnTB++PvA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "633a8b88-6ecb-4bc8-9a0a-3930d25aed8f",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 44, 973, DateTimeKind.Utc).AddTicks(6473),
                            UserName = "Hu"
                        },
                        new
                        {
                            Id = new Guid("69897cba-b7da-4431-97b9-dd13a04969d1"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 6, DateTimeKind.Utc).AddTicks(6752),
                            Email = "purus.mauris@google.ca",
                            EmailConfirmed = true,
                            FirstName = "MacKenzie",
                            LastName = "Burnett",
                            LockoutEnabled = false,
                            NormalizedEmail = "PURUS.MAURIS@GOOGLE.CA",
                            NormalizedUserName = "IRIS",
                            PasswordHash = "AQAAAAIAAYagAAAAENijOwrYHgYB7+faLfBq8YJrL/t8ZK7xybx/sMglO3qzUxSjULr/tWLL5d6+nBbVtg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ecb268cb-b27f-467e-8d48-3d3898bfbac1",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 6, DateTimeKind.Utc).AddTicks(6753),
                            UserName = "Iris"
                        },
                        new
                        {
                            Id = new Guid("9241c1d5-4aae-4122-8c19-ce9404517431"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 55, DateTimeKind.Utc).AddTicks(1617),
                            Email = "vitae@yahoo.net",
                            EmailConfirmed = true,
                            FirstName = "Kiara",
                            LastName = "Perez",
                            LockoutEnabled = false,
                            NormalizedEmail = "VITAE@YAHOO.NET",
                            NormalizedUserName = "MAGGIE",
                            PasswordHash = "AQAAAAIAAYagAAAAEPsqqRpyDJdNSwnbk0G5KIcZuA3JWEIiEHNa4JXL7rjwVeD4kdO8YWZCHYk7exVrBA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "53d970ad-b0f6-4c65-a612-d8c092be5628",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 55, DateTimeKind.Utc).AddTicks(1623),
                            UserName = "Maggie"
                        },
                        new
                        {
                            Id = new Guid("562e4fa7-d52a-4f23-abb8-283006e94c00"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 100, DateTimeKind.Utc).AddTicks(3356),
                            Email = "fusce.diam.nunc@yahoo.org",
                            EmailConfirmed = true,
                            FirstName = "Holmes",
                            LastName = "Burton",
                            LockoutEnabled = false,
                            NormalizedEmail = "FUSCE.DIAM.NUNC@YAHOO.ORG",
                            NormalizedUserName = "FREDERICKA",
                            PasswordHash = "AQAAAAIAAYagAAAAEB3v57T9874Jx2Nau5i2OblbOlIr5vTuYYpZa4eFm7E/lv63z5RO0cV7u52gYKPZFg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "49ce61d1-53e8-4ec2-8960-eb1325a34bb3",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 100, DateTimeKind.Utc).AddTicks(3358),
                            UserName = "Fredericka"
                        },
                        new
                        {
                            Id = new Guid("bd977635-cff5-4c59-858a-77454405222d"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 133, DateTimeKind.Utc).AddTicks(6750),
                            Email = "et.netus.et@outlook.edu",
                            EmailConfirmed = true,
                            FirstName = "Ralph",
                            LastName = "Valdez",
                            LockoutEnabled = false,
                            NormalizedEmail = "ET.NETUS.ET@OUTLOOK.EDU",
                            NormalizedUserName = "VLADIMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAENKpxj2wQWAkMkp1+R1G84HlCvXTgIwWZ2OZW1tCl2aDeNvomRSyp00C3bwYSzjOUw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "40e322b9-9928-41b4-bdf2-e8425cab7f9d",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 133, DateTimeKind.Utc).AddTicks(6752),
                            UserName = "Vladimir"
                        },
                        new
                        {
                            Id = new Guid("59a4ea67-b5cd-4976-9991-9552ed728ad0"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 166, DateTimeKind.Utc).AddTicks(9782),
                            Email = "ipsum.curabitur@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Victoria",
                            LastName = "Weaver",
                            LockoutEnabled = false,
                            NormalizedEmail = "IPSUM.CURABITUR@OUTLOOK.COM",
                            NormalizedUserName = "CAILIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKsO2Tz1qoDW7wx9JY/ok2lThzUrFuo8hv5T+khM/aPo8NJyUVo4rQ9ta0ZO081Y9g==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "f3da7176-39cc-457b-bde8-6ef865091088",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 166, DateTimeKind.Utc).AddTicks(9784),
                            UserName = "Cailin"
                        },
                        new
                        {
                            Id = new Guid("2451f7b3-c79d-44d3-95ca-01459d03511a"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 200, DateTimeKind.Utc).AddTicks(958),
                            Email = "blandit.congue@protonmail.ca",
                            EmailConfirmed = true,
                            FirstName = "Ursa",
                            LastName = "Pickett",
                            LockoutEnabled = false,
                            NormalizedEmail = "BLANDIT.CONGUE@PROTONMAIL.CA",
                            NormalizedUserName = "AMENA",
                            PasswordHash = "AQAAAAIAAYagAAAAEEPQhVcGkLDElU1+v8CKL2GxawtF8uTYfAy2JBzNCNgMWQ3vJQam1BMOHOiGcC3UNQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "03893ce2-2178-47cb-a934-769b8a036db5",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 200, DateTimeKind.Utc).AddTicks(959),
                            UserName = "Amena"
                        },
                        new
                        {
                            Id = new Guid("33f604eb-dec0-478e-8dbf-dc7614f1d632"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 233, DateTimeKind.Utc).AddTicks(5328),
                            Email = "non.vestibulum@outlook.ca",
                            EmailConfirmed = true,
                            FirstName = "Amity",
                            LastName = "Hess",
                            LockoutEnabled = false,
                            NormalizedEmail = "NON.VESTIBULUM@OUTLOOK.CA",
                            NormalizedUserName = "DEBRA",
                            PasswordHash = "AQAAAAIAAYagAAAAEKOY5PD2sNXSlJ8kIMRj2XrYIhbjl1SZAz2B8d0JRAGX3BxmrSK6gcMfgDPDhDKsVQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "2402eca5-1dc3-475d-b083-5cde7776e841",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 233, DateTimeKind.Utc).AddTicks(5332),
                            UserName = "Debra"
                        },
                        new
                        {
                            Id = new Guid("50debb43-f3f9-48e6-af21-7510aef1c997"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 267, DateTimeKind.Utc).AddTicks(3246),
                            Email = "metus.in@protonmail.edu",
                            EmailConfirmed = true,
                            FirstName = "Cooper",
                            LastName = "Briggs",
                            LockoutEnabled = false,
                            NormalizedEmail = "METUS.IN@PROTONMAIL.EDU",
                            NormalizedUserName = "KAYE",
                            PasswordHash = "AQAAAAIAAYagAAAAEChv20T3gMpaTJcWLVQk+tHTAA+oqE+5dX5gePJ4y41Cc3owEBSUxRj0OHeCH89+bg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "4bb0fa48-d558-4cd8-9807-4f8a3c1d0cd2",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 267, DateTimeKind.Utc).AddTicks(3248),
                            UserName = "Kaye"
                        },
                        new
                        {
                            Id = new Guid("8e7d98f8-bf2d-4cbb-93f9-bc2bc846007d"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 300, DateTimeKind.Utc).AddTicks(5739),
                            Email = "quisque@hotmail.edu",
                            EmailConfirmed = true,
                            FirstName = "Brynne",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "QUISQUE@HOTMAIL.EDU",
                            NormalizedUserName = "TIMON",
                            PasswordHash = "AQAAAAIAAYagAAAAEECLb3OwYt9CxlPywq3h+pkCoAo2+eCA6x9gDbUEIcD10mhHShSUHjPySY18o8LLWA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6f1c97af-6905-4246-8802-b97631c2ffd1",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 300, DateTimeKind.Utc).AddTicks(5741),
                            UserName = "Timon"
                        },
                        new
                        {
                            Id = new Guid("e3643ac1-9b36-401c-a5f3-7ebe35e00a1a"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 333, DateTimeKind.Utc).AddTicks(8630),
                            Email = "sed.molestie@icloud.couk",
                            EmailConfirmed = true,
                            FirstName = "Bruno",
                            LastName = "Hurst",
                            LockoutEnabled = false,
                            NormalizedEmail = "SED.MOLESTIE@ICLOUD.COUK",
                            NormalizedUserName = "BERT",
                            PasswordHash = "AQAAAAIAAYagAAAAEF44zoLlg49xOSxRdimkXgxKEUwFtH7TEJ3RF0kCpEG0ZtYWIaKqBqI0XXQP+kBxkw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "968697de-4658-42d4-ad9b-1f1ebe92b8bb",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 333, DateTimeKind.Utc).AddTicks(8631),
                            UserName = "Bert"
                        },
                        new
                        {
                            Id = new Guid("9aa170fb-cd47-4394-9ef3-cd55940abc9a"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 366, DateTimeKind.Utc).AddTicks(9991),
                            Email = "integer.vulputate@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Brandon",
                            LastName = "Waller",
                            LockoutEnabled = false,
                            NormalizedEmail = "INTEGER.VULPUTATE@YAHOO.COM",
                            NormalizedUserName = "PHILLIP",
                            PasswordHash = "AQAAAAIAAYagAAAAEN/PSIRBhILsL/bqNSmZV3KzRVp6z+Jw87h5Asoy7aulnh538N+oISO87WbVIlnCcw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ca6487dc-1d2f-4024-a7b4-9f30e2b41383",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 366, DateTimeKind.Utc).AddTicks(9993),
                            UserName = "Phillip"
                        },
                        new
                        {
                            Id = new Guid("aad20e5d-98f2-4959-ae7c-701247eeee53"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 400, DateTimeKind.Utc).AddTicks(619),
                            Email = "sed.nec@hotmail.org",
                            EmailConfirmed = true,
                            FirstName = "Gage",
                            LastName = "Goodman",
                            LockoutEnabled = false,
                            NormalizedEmail = "SED.NEC@HOTMAIL.ORG",
                            NormalizedUserName = "LEAH",
                            PasswordHash = "AQAAAAIAAYagAAAAEMVCHby+PniBZOcURjwmDnF2sdSwopptqhTwh9ooPE7JO+HbNBVGzwK5At5sdIXnaQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "dfe34eb5-07d1-478f-bfb7-8f921329be99",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 400, DateTimeKind.Utc).AddTicks(619),
                            UserName = "Leah"
                        },
                        new
                        {
                            Id = new Guid("96ec9928-e9e2-49dd-97d9-d514d0a078bc"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 433, DateTimeKind.Utc).AddTicks(6982),
                            Email = "turpis.in.condimentum@icloud.edu",
                            EmailConfirmed = true,
                            FirstName = "Melissa",
                            LastName = "Rosa",
                            LockoutEnabled = false,
                            NormalizedEmail = "TURPIS.IN.CONDIMENTUM@ICLOUD.EDU",
                            NormalizedUserName = "UNITY",
                            PasswordHash = "AQAAAAIAAYagAAAAEFsJz0gAhRQ+cBw4OKSanrLOB6rlZgjri13REfOhtbL5RoGhL6OuM5/BVdprE/76+w==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "945938e7-5fa4-48ab-bd75-aab63b88278f",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 433, DateTimeKind.Utc).AddTicks(6983),
                            UserName = "Unity"
                        },
                        new
                        {
                            Id = new Guid("dc03d5cb-0633-452a-85b4-8b206443f5a2"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 467, DateTimeKind.Utc).AddTicks(1190),
                            Email = "suscipit.nonummy@yahoo.couk",
                            EmailConfirmed = true,
                            FirstName = "Serina",
                            LastName = "Sparks",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUSCIPIT.NONUMMY@YAHOO.COUK",
                            NormalizedUserName = "ABBOT",
                            PasswordHash = "AQAAAAIAAYagAAAAEEdThkiADYh/ylvuDRwUhYUy7OJUJJ3BCdRIESIw3H3NQ7gQWcJaTi4rLglfQJDZLQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "5d960b45-55bd-4c9a-b532-2557de35557f",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 467, DateTimeKind.Utc).AddTicks(1190),
                            UserName = "Abbot"
                        },
                        new
                        {
                            Id = new Guid("b4455321-6e16-4011-bca2-670c1a7db1b8"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 500, DateTimeKind.Utc).AddTicks(2326),
                            Email = "urna@outlook.net",
                            EmailConfirmed = true,
                            FirstName = "Nyssa",
                            LastName = "Forbes",
                            LockoutEnabled = false,
                            NormalizedEmail = "URNA@OUTLOOK.NET",
                            NormalizedUserName = "HAYES",
                            PasswordHash = "AQAAAAIAAYagAAAAENxzXT/H/czFYYaB8Nas7bl9QL4dhpgDa8IN73Z+Yt7/wc0C1s/b5jkQ1jXPeHSglQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "aa7485a4-7afe-467a-9f9d-7b63d931ac83",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 500, DateTimeKind.Utc).AddTicks(2326),
                            UserName = "Hayes"
                        },
                        new
                        {
                            Id = new Guid("3a43f1cd-182b-4663-852c-5ffc402abd8c"),
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 533, DateTimeKind.Utc).AddTicks(9574),
                            Email = "amet.risus.donec@hotmail.ca",
                            EmailConfirmed = true,
                            FirstName = "Jelani",
                            LastName = "Conrad",
                            LockoutEnabled = false,
                            NormalizedEmail = "AMET.RISUS.DONEC@HOTMAIL.CA",
                            NormalizedUserName = "KAY",
                            PasswordHash = "AQAAAAIAAYagAAAAEM5eRX+3iZkQjXcvzOHVyxmMUPG/w0eg59ta78T+qC9zMnl15SFZxEinWYNJV4vLTg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "102dcc77-02ec-4a43-9e69-8da3d8922c4a",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 533, DateTimeKind.Utc).AddTicks(9576),
                            UserName = "Kay"
                        });
                });

            modelBuilder.Entity("sn_project_be.Data.Friendship", b =>
                {
                    b.Property<Guid>("FriendshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceiverUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("FriendshipId");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("sn_project_be.Data.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c55146c8-8582-42d4-a9a2-b4aa43b15753"),
                            Content = "rutrum eu, ultrices sit amet, risus. Donec nibh enim, gravida sit amet, dapibus id,",
                            CreatedAt = new DateTime(2023, 5, 12, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9183),
                            Title = "Integer urna. Vivamus molestie dapibus ligula. Aliquam erat",
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9239)
                        },
                        new
                        {
                            Id = new Guid("271f5197-0214-4e51-a5f3-b2d6bd8f2600"),
                            Content = "ipsum. Suspendisse sagittis. Nullam vitae diam. Proin dolor. Nulla semper tellus id nunc interdum feugiat. Sed nec metus facilisis lorem tristique aliquet. Phasellus fermentum convallis ligula.",
                            CreatedAt = new DateTime(2023, 3, 12, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9252),
                            Title = "dictum sapien. Aenean massa. Integer",
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9253)
                        },
                        new
                        {
                            Id = new Guid("e26d1acf-6614-483a-819a-ec0031ce0b27"),
                            Content = "Quisque nonummy ipsum non arcu. Vivamus sit amet risus. Donec egestas. Aliquam nec enim. Nunc ut",
                            CreatedAt = new DateTime(2023, 2, 26, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9255),
                            Title = "tincidunt aliquam arcu. Aliquam",
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9256)
                        },
                        new
                        {
                            Id = new Guid("fc44550a-76ef-4d96-947d-47f70733996a"),
                            Content = "lobortis ultrices. Vivamus rhoncus. Donec est.",
                            CreatedAt = new DateTime(2023, 2, 3, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9257),
                            Title = "est, congue a, aliquet",
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9260)
                        },
                        new
                        {
                            Id = new Guid("7fdb775a-f620-4e73-a295-ffc328a59f37"),
                            Content = "et, commodo at, libero. Morbi accumsan laoreet ipsum. Curabitur consequat, lectus sit amet luctus vulputate, nisi sem semper erat, in consectetuer ipsum nunc id enim. Curabitur massa. Vestibulum accumsan neque et nunc.",
                            CreatedAt = new DateTime(2023, 3, 11, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9261),
                            Title = "vitae",
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9262)
                        },
                        new
                        {
                            Id = new Guid("50903b48-1e70-4a99-94a5-64cd032c4f45"),
                            Content = "sem. Nulla interdum. Curabitur dictum. Phasellus in felis. Nulla tempor augue ac ipsum. Phasellus vitae mauris sit amet lorem semper auctor. Mauris vel turpis. Aliquam adipiscing",
                            CreatedAt = new DateTime(2023, 8, 24, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9270),
                            Title = "arcu. Sed et libero. Proin mi. Aliquam gravida mauris",
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9271)
                        },
                        new
                        {
                            Id = new Guid("8e1e49db-31d4-440d-a46e-8169302e38d0"),
                            Content = "vehicula risus. Nulla eget metus eu erat semper rutrum. Fusce dolor quam, elementum at, egestas a, scelerisque sed, sapien. Nunc pulvinar arcu et pede. Nunc sed orci lobortis augue scelerisque mollis. Phasellus libero mauris, aliquam eu, accumsan",
                            CreatedAt = new DateTime(2023, 2, 3, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9273),
                            Title = "nibh vulputate",
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9274)
                        },
                        new
                        {
                            Id = new Guid("5f31f601-aa2a-4da5-9033-dc622a8fe263"),
                            Content = "at pede. Cras vulputate velit eu sem. Pellentesque ut ipsum ac mi eleifend egestas. Sed pharetra, felis eget varius ultrices, mauris ipsum porta elit, a feugiat tellus lorem eu metus. In lorem. Donec elementum, lorem ut aliquam iaculis, lacus",
                            CreatedAt = new DateTime(2024, 2, 23, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9275),
                            Title = "ut, sem. Nulla interdum. Curabitur dictum. Phasellus in",
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9276)
                        },
                        new
                        {
                            Id = new Guid("f0c7817b-a58a-4cd3-af54-e22b1fc08f4b"),
                            Content = "ac facilisis",
                            CreatedAt = new DateTime(2023, 12, 10, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9277),
                            Title = "ac sem ut dolor",
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9279)
                        },
                        new
                        {
                            Id = new Guid("79a3d487-8dc1-4934-9af5-4301e0fab079"),
                            Content = "augue. Sed molestie. Sed id risus quis diam luctus lobortis. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos hymenaeos. Mauris ut quam vel sapien imperdiet ornare. In faucibus.",
                            CreatedAt = new DateTime(2023, 8, 13, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9281),
                            Title = "vestibulum massa rutrum magna. Cras convallis convallis dolor.",
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9337)
                        },
                        new
                        {
                            Id = new Guid("b1acd71b-d830-46cb-a5b1-be2968f06244"),
                            Content = "sapien. Aenean massa. Integer vitae nibh. Donec est mauris, rhoncus id, mollis nec,",
                            CreatedAt = new DateTime(2023, 6, 22, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9339),
                            Title = "Nullam suscipit, est ac facilisis facilisis, magna tellus faucibus leo,",
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9340)
                        },
                        new
                        {
                            Id = new Guid("bf110d5b-036b-4e19-aff1-d194c0022fbd"),
                            Content = "id, ante. Nunc mauris sapien, cursus in, hendrerit consectetuer, cursus et, magna. Praesent interdum ligula eu enim. Etiam imperdiet dictum magna. Ut tincidunt orci quis lectus. Nullam suscipit, est ac facilisis facilisis, magna tellus",
                            CreatedAt = new DateTime(2023, 8, 25, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9341),
                            Title = "ac mattis",
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9343)
                        },
                        new
                        {
                            Id = new Guid("4e4c8967-c8f5-4918-a221-7654785f794b"),
                            Content = "vitae, aliquet nec, imperdiet nec, leo. Morbi neque tellus, imperdiet non, vestibulum nec, euismod in, dolor. Fusce feugiat. Lorem ipsum dolor sit",
                            CreatedAt = new DateTime(2023, 12, 26, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9344),
                            Title = "diam at pretium aliquet, metus",
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9345)
                        },
                        new
                        {
                            Id = new Guid("16e87c29-c0c3-4fc3-b71a-d4eacdaa4aa9"),
                            Content = "Mauris quis turpis vitae purus gravida sagittis. Duis gravida. Praesent eu nulla at sem molestie sodales. Mauris blandit enim consequat purus. Maecenas libero est, congue a, aliquet vel, vulputate eu, odio. Phasellus at augue id ante dictum cursus. Nunc",
                            CreatedAt = new DateTime(2023, 10, 29, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9346),
                            Title = "nulla. Integer urna. Vivamus molestie dapibus ligula.",
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9347)
                        },
                        new
                        {
                            Id = new Guid("4b067edb-5c51-4a7c-8869-0d2f911f2529"),
                            Content = "mauris ut mi. Duis risus odio, auctor vitae, aliquet nec, imperdiet nec, leo. Morbi neque tellus,",
                            CreatedAt = new DateTime(2023, 11, 23, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9349),
                            Title = "at sem molestie sodales. Mauris blandit enim",
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9350)
                        },
                        new
                        {
                            Id = new Guid("4ef9cad6-0473-47e1-819d-1b053521741b"),
                            Content = "diam vel arcu. Curabitur ut odio vel est tempor bibendum. Donec felis orci, adipiscing non, luctus sit amet, faucibus ut, nulla. Cras eu tellus eu augue porttitor interdum. Sed auctor odio",
                            CreatedAt = new DateTime(2024, 2, 11, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9352),
                            Title = "neque. Morbi quis urna. Nunc quis arcu vel quam",
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9352)
                        },
                        new
                        {
                            Id = new Guid("0daf7c70-c2a0-4020-a885-8f21293dc9de"),
                            Content = "arcu. Morbi sit amet massa. Quisque porttitor eros nec tellus. Nunc lectus pede, ultrices a, auctor non, feugiat nec, diam. Duis",
                            CreatedAt = new DateTime(2023, 8, 18, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9354),
                            Title = "diam. Pellentesque",
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9355)
                        },
                        new
                        {
                            Id = new Guid("902fc5ce-9d13-4f8e-8e81-a18c910a803b"),
                            Content = "eu odio tristique pharetra. Quisque ac libero nec ligula consectetuer rhoncus.",
                            CreatedAt = new DateTime(2023, 2, 1, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9357),
                            Title = "ridiculus mus. Proin vel",
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9358)
                        },
                        new
                        {
                            Id = new Guid("8590ae49-0a94-4d52-8088-b3427c0d8d26"),
                            Content = "vestibulum massa rutrum magna. Cras convallis convallis dolor. Quisque tincidunt pede ac urna. Ut tincidunt vehicula risus. Nulla eget metus eu erat semper rutrum. Fusce dolor quam,",
                            CreatedAt = new DateTime(2023, 1, 28, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9359),
                            Title = "ridiculus mus. Proin vel nisl. Quisque fringilla euismod",
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9360)
                        },
                        new
                        {
                            Id = new Guid("31089320-2542-4d14-8e6f-0553cc351597"),
                            Content = "pretium neque. Morbi quis urna.",
                            CreatedAt = new DateTime(2023, 8, 28, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9361),
                            Title = "Nulla tincidunt, neque vitae",
                            UpdatedAt = new DateTime(2024, 2, 27, 14, 2, 45, 567, DateTimeKind.Utc).AddTicks(9363)
                        });
                });

            modelBuilder.Entity("sn_project_be.Data.User_Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPosts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("sn_project_be.Data.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("sn_project_be.Data.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sn_project_be.Data.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("sn_project_be.Data.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sn_project_be.Data.Friendship", b =>
                {
                    b.HasOne("sn_project_be.Data.ApiUser", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sn_project_be.Data.ApiUser", "SenderUser")
                        .WithMany("Friendships")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceiverUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("sn_project_be.Data.User_Post", b =>
                {
                    b.HasOne("sn_project_be.Data.Post", "Post")
                        .WithMany("UserPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sn_project_be.Data.ApiUser", "User")
                        .WithMany("UserPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("sn_project_be.Data.ApiUser", b =>
                {
                    b.Navigation("Friendships");

                    b.Navigation("UserPosts");
                });

            modelBuilder.Entity("sn_project_be.Data.Post", b =>
                {
                    b.Navigation("UserPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
